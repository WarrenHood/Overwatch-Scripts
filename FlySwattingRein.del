globalvar define fliesEliminated = 0;
globalvar define roachesEliminated = 0;
globalvar define rein_inaccuracy_interval = 3.0;
globalvar define useRein = true;
globalvar define roachCount = 5;
globalvar define flyCount = 5;
globalvar define currentTime;
globalvar define matchEnded = false;

globalvar define bugWallAvoidanceMultiplier;
globalvar define bugSquisherAvoidanceMultiplier;
globalvar define bugRaycastDistance;


rule: "Spawn Bot and Init Settings"
Event.OngoingGlobal {
    define reinbot = null;
    // define debugHud1 = CreateHudText(AllPlayers(), "Slots on team 2", NumberOfSlots(Team.Team2), null, Location.Left);
    flyCount = WorkshopSettingInteger("Bug Spawn Count", "Flies", 5, 0, 10);
    roachCount = WorkshopSettingInteger("Bug Spawn Count", "Roaches", 5, 0, 10);
    rein_inaccuracy_interval = WorkshopSettingReal("ReinBot Settings", "Stupidity", 3.0, 0, 10);
    bugWallAvoidanceMultiplier = WorkshopSettingReal("BugBot Settings", "Wall Avoidance Coefficient", 1.0, -20, 20);
    bugSquisherAvoidanceMultiplier = WorkshopSettingReal("BugBot Settings", "Squisher Avoidance Coefficient", 1.0, -20, 20);
    bugRaycastDistance = WorkshopSettingReal("BugBot Settings", "Bug Raycast Distance", 20.0, 0, 20);

    if (flyCount + roachCount > 11) {
        flyCount = 11-flyCount;
    }

    for (;;) {
        if (useRein) {
            if (CountOf(AllPlayers(Team.Team1)) == 0) {
                reinbot = CreateDummyBot(Hero.Reinhardt, Team.Team1, 1);
                StartForcingDummyBotName(reinbot, "ReinBot");
            }
            else if (PlayersInSlot(0, Team.Team1) != null && HasSpawned(PlayersInSlot(0, Team.Team1)) && PlayersInSlot(1, Team.Team1) != null && reinbot != null) {
                DestroyDummyBot(Team.Team1, 1);
                reinbot = null;
            }
        }

        if (!IsAssemblingHeroes() && !matchEnded) {
            //DestroyHudText(debugHud1);
            //debugHud1 = CreateHudText(AllPlayers(), "Slots on team 2", NumberOfSlots(Team.Team2), null, Location.Left);

            // Spawn roaches
            for (define i=0; i < roachCount - roachesEliminated - CountOf(FilteredArray(AllLivingPlayers(Team.Team2), HeroOf(ArrayElement()) == Hero.Tracer)); i++) {
                for(define iSlot=NumberOfSlots(Team.Team2); iSlot<NumberOfSlots(Team.Team2)+12; iSlot++) {
                    if (PlayersInSlot(iSlot, Team.Team2) == null) {
                        StartForcingDummyBotName(CreateDummyBot(Hero.Tracer, Team.Team2, iSlot), "Roach");
                        break;
                    }
                }
            }

            // Spawn flies
            for (define i=0; i < flyCount - fliesEliminated - CountOf(FilteredArray(AllLivingPlayers(Team.Team2), HeroOf(ArrayElement()) == Hero.Pharah)); i++) {
                for(define iSlot=NumberOfSlots(Team.Team2); iSlot<NumberOfSlots(Team.Team2)+12; iSlot++) {
                    if (PlayersInSlot(iSlot, Team.Team2) == null) {
                        StartForcingDummyBotName(CreateDummyBot(Hero.Pharah, Team.Team2, iSlot), "Fly");
                        break;
                    }
                }
            }
        }

        
        Wait(0.25);
    }
}

rule: "ScalePlayers"
Event.OngoingPlayer {
    for (;;) {
        if (EventPlayer().Hero() == Hero.Reinhardt || EventPlayer().Hero() == Hero.Brigitte) {
            StartScalingPlayer(EventPlayer(), 2.0);
            //DisableMovementCollisionWithEnvironment(EventPlayer());
            SetMoveSpeed(EventPlayer(), 150);
        }
        else {
            StartScalingPlayer(EventPlayer(), 0.3);
            //EnableMovementCollisionWithEnvironment(EventPlayer());
            if (EventPlayer().Hero() == Hero.Tracer) {
                SetMoveSpeed(EventPlayer(), 250);
            }
            else {
                SetMoveSpeed(EventPlayer(), 200);
            }
            
        }
        Wait(1);
    }
}

rule: "FasterReinCharge"
Event.OngoingPlayer {
    for (;;) {
        if (EventPlayer().Hero() == Hero.Reinhardt) {
            if (IsUsingAbility1(EventPlayer())) {
                SetMoveSpeed(EventPlayer(), 500);
            }
            else {
                SetMoveSpeed(EventPlayer(), 150);
            }
        }
        Wait(0.25); // Only wait if not reinhardt
    }
}

rule: "ScaleDamage" 
Event.OnDamageDealt {
    if (EventPlayer().Hero() == Hero.Reinhardt || EventPlayer().Hero() == Hero.Brigitte) {
        SetDamageDealt(EventPlayer(), 100.0);
    }
    else {
        SetDamageDealt(EventPlayer(), 100.0/CountOf(AllPlayers(Team.Team2)));
    }
}

rule: "Death points"
Event.OnDeath {
    if (EventPlayer().Team() == Team.Team2) {
        if (EventPlayer().Hero() == Hero.Pharah) fliesEliminated++;
        if (EventPlayer().Hero() == Hero.Tracer) roachesEliminated++;
        if (IsDummyBot(EventPlayer())) {
            BigMessage(AllPlayers(Team.Team1), "Squished bug (Bot) for an additional 10 seconds");
            currentTime += 10;
        }
        else {
            BigMessage(AllPlayers(Team.Team1), "Squished bug (Human) for an additional 20 seconds");
            currentTime += 20;
        }
    }
}

rule: "Match Timer" 
Event.OngoingGlobal {
    currentTime = 40; // + (20.0 * CountOf(AllPlayers(Team.Team2)));
    roachesEliminated = 0;
    fliesEliminated = 0;
    define hudText = CreateHudText(AllPlayers(Team.Team1), "Squish the bugs!", "Time Remaining", currentTime, Location.Top, -1, Color.Blue, Color.Red, Color.White);
    define hudText2 = CreateHudText(AllPlayers(Team.Team2), "Try to survive!", "Time Remaining", currentTime, Location.Top, -1, Color.Blue, Color.Red, Color.White);
    define hudText3 = CreateHudText(AllPlayers(), "Fly Swatting Simulator", null, null, Location.Right, -1, Color.Red, Color.Red, Color.Red);
    define lastRein = null;
    define swapSides = true;
    matchEnded = false;

    DisableCompletion();
    DisableScoring();

    for (;;) {
        DisableCompletion();
        DisableScoring();
        if (matchEnded && IsGameInProgress()) {
            roachesEliminated = 0;
            fliesEliminated = 0;
            if (swapSides) {
                 BigMessage(AllPlayers(), "Swapping sides");

                // Move rein or brig to first free slot
                if (PlayersInSlot(0, Team.Team1) != null) {
                    for(define i=0; i < NumberOfSlots(Team.Team2); i++) {
                        define currentPlayer = PlayersInSlot(i, Team.Team2);
                        if (currentPlayer == null || IsDummyBot(currentPlayer)) {
                            MovePlayerToTeam(PlayersInSlot(0, Team.Team1), Team.Team2, i);
                            break;
                        }
                    }
                }

                // Move someone to the rein/brig team
                define nextRein = RandomValueInArray(AllPlayers(Team.Team2));
                define attemptsRemainingCount = 5;
                while ((nextRein == lastRein || nextRein == null || IsDummyBot(nextRein)) && attemptsRemainingCount >= 0) {
                    nextRein = RandomValueInArray(FilteredArray(AllPlayers(Team.Team2), !IsDummyBot(ArrayElement())));
                    attemptsRemainingCount--;
                }
                if (nextRein != lastRein) {
                    MovePlayerToTeam(nextRein, Team.Team1, 0);
                }
                
            }

            DestroyAllDummyBots();
            matchEnded = false;
            RestartMatch();
        }
        
        /*
        if (matchEnded && (!swapSides ||  lastRein != PlayersInSlot(0, Team.Team1) || lastRein == null)) {
            // If the rein/brig from last time is different, we can restart
            matchEnded = false;
            RestartMatch();
        }*/

        if (!matchEnded && IsGameInProgress() && CountOf(FilteredArray(AllLivingPlayers(Team.Team2), HasSpawned(ArrayElement()))) == 0 && CountOf(AllPlayers(Team.Team1)) > 0 && CountOf(AllPlayers(Team.Team2)) > 0) {
            // Reinhardt/Brig wins
            lastRein = AllPlayers(Team.Team1)[0];
            matchEnded = true;

            BigMessage(AllPlayers(Team.Team1), "You win!");
            BigMessage(AllPlayers(Team.Team2), "You lose!");
            Wait(1);
        }

        /*
        if (MatchRound() > 1) {
            if (!matchEnded && CountOf(AllPlayers(Team.Team1)) > 0 && CountOf(AllPlayers(Team.Team2)) > 0) {
                lastRein = AllPlayers(Team.Team1)[0];
                matchEnded = true;
            }
            RestartMatch();
        }*/
        DisableGameModeHud(AllPlayers());
        if (IsGameInProgress() && !matchEnded) {
            //SetMatchTime(currentTime+1);
            PauseMatchTime();
            DestroyHudText(hudText);
            DestroyHudText(hudText2);
            DestroyHudText(hudText3);
            hudText = CreateHudText(AllPlayers(Team.Team1), "Squish the bugs", "Time Remaining", currentTime, Location.Top, -1, Color.Blue, Color.Red, Color.White);
            hudText2 = CreateHudText(AllPlayers(Team.Team2), "Try to survive!", "Time Remaining", currentTime, Location.Top, -1, Color.Blue, Color.Red, Color.White);
            hudText3 = CreateHudText(AllPlayers(), "Fly Swatting Simulator", null, null, Location.Right, -1, Color.Red, Color.Red, Color.Red);
            if (currentTime <= 0 || CountOf(FilteredArray(AllLivingPlayers(Team.Team1), HasSpawned(ArrayElement()))) == 0) {
                // Bugs/Flies win
                currentTime = 40 + (20.0 * CountOf(AllPlayers(Team.Team2)));
                BigMessage(AllPlayers(Team.Team1), "You failed to squish the bugs in time!");
                BigMessage(AllPlayers(Team.Team2), "You win!");
                
                lastRein = AllPlayers(Team.Team1)[0];
                matchEnded = true;
            }
            currentTime--;
        }
        else {
            currentTime = 40;// + (20.0 * CountOf(AllPlayers(Team.Team2)));
        }
        Wait(1);
    }
}

rule: "Bot_Actions" 
Event.OngoingPlayer {
    for (;;) {
        if (TeamOf(EventPlayer()) == Team.Team1 && !IsGameInProgress() && !IsWaitingForPlayers()) {
            DisallowButton(EventPlayer(), Button.Ability1);
            DisallowButton(EventPlayer(), Button.Ability2);
            DisallowButton(EventPlayer(), Button.PrimaryFire);
            DisallowButton(EventPlayer(), Button.SecondaryFire);
            SetMoveSpeed(EventPlayer(), 0);
        }
        else {
            AllowButton(EventPlayer(), Button.Ability1);
            AllowButton(EventPlayer(), Button.Ability2);
            AllowButton(EventPlayer(), Button.PrimaryFire);
            AllowButton(EventPlayer(), Button.SecondaryFire);
        }
        
        //Roach logic
        if (IsDummyBot(EventPlayer()) && EventPlayer().Hero() == Hero.Tracer && IsGameInProgress()) {
            define direction = Vector(RandomReal(-360, 360), 0, RandomReal(-360, 360)).Normalize();
            direction = Vector(direction.X, EyePosition(EventPlayer()).Y, direction.Z);
            define bestDir = direction;
            define rayHit = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + direction*bugRaycastDistance, AllPlayers());
            define rayDist = bugWallAvoidanceMultiplier*rayHit.DistanceTo(EventPlayer()) + bugSquisherAvoidanceMultiplier*rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
            //define rayDist = rayHit.DistanceTo(EventPlayer());
            //define rayDist = rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
            define bestDist = rayDist;

            for (define i=0; i<10; i++) {
                direction = Vector(RandomReal(-360, 360), 0, RandomReal(-360, 360)).Normalize();
                rayHit = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + direction*bugRaycastDistance, AllPlayers());
                rayDist = bugWallAvoidanceMultiplier*rayHit.DistanceTo(EventPlayer()) + bugSquisherAvoidanceMultiplier*rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
                //rayDist = rayHit.DistanceTo(EventPlayer());
                //rayDist = rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
                if (rayDist > bestDist) {
                    bestDist = rayDist;
                    bestDir = Vector(direction.X, direction.Y, direction.Z);
                }
            }
            direction = bestDir;

            SetFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(ClosestPlayerTo(EventPlayer(), Team.Team1))), Relative.ToWorld);
            StartThrottleInDirection(EventPlayer(), direction, 1000, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle);
            if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                StartHoldingButton(EventPlayer(), Button.PrimaryFire);
            }
            if (RandomReal(0,1) < 0.75) {
                PressButton(EventPlayer(), Button.Ability1);
            }
            else if (!IsJumping()) {
                PressButton(EventPlayer(), Button.Jump);
            }
            
        }

        //Pharah logic
        if (IsDummyBot(EventPlayer()) && EventPlayer().Hero() == Hero.Pharah && IsGameInProgress()) {
            define direction = Vector(RandomReal(-360, 360), 0, RandomReal(-360, 360)).Normalize();
            direction = Vector(direction.X, EyePosition(EventPlayer()).Y, direction.Z);
            define bestDir = direction;
            define rayHit = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + direction*bugRaycastDistance, AllPlayers());
            define rayDist = bugWallAvoidanceMultiplier*rayHit.DistanceTo(EventPlayer()) + bugSquisherAvoidanceMultiplier*rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
            //define rayDist = rayHit.DistanceTo(EventPlayer());
            //define rayDist = rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
            define bestDist = rayDist;

            for (define i=0; i<10; i++) {
                direction = Vector(RandomReal(-360, 360), 0, RandomReal(-360, 360)).Normalize();
                rayHit = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + direction*bugRaycastDistance, AllPlayers());
                rayDist = bugWallAvoidanceMultiplier*rayHit.DistanceTo(EventPlayer()) + bugSquisherAvoidanceMultiplier*rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
                //rayDist = rayHit.DistanceTo(EventPlayer());
                //rayDist = rayHit.DistanceTo(AllLivingPlayers(Team.Team1)[0]);
                if (rayDist > bestDist) {
                    bestDist = rayDist;
                    bestDir = Vector(direction.X, direction.Y, direction.Z);
                }
            }
            direction = bestDir;
            
            SetFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(ClosestPlayerTo(EventPlayer(), Team.Team1))), Relative.ToWorld);
            StartThrottleInDirection(EventPlayer(), direction, 1000, Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle);

            if (!IsButtonHeld(EventPlayer(), Button.PrimaryFire)) {
                StartHoldingButton(EventPlayer(), Button.PrimaryFire);
            }
            if (RandomReal(0,1) < 0.75) {
                PressButton(EventPlayer(), Button.Ability1);
            }
            if (RandomReal(0,1) < 0.75) {
                StartHoldingButton(EventPlayer(), Button.Jump);
            }
            else {
                StopHoldingButton(EventPlayer(), Button.Jump);
            }
        }


        // Reinhardt logic
        if (IsDummyBot(EventPlayer()) && EventPlayer().Hero() == Hero.Reinhardt && IsGameInProgress()) {
            if (CountOf(FilteredArray(AllLivingPlayers(Team.Team2), HasSpawned(ArrayElement()))) > 0) {
                define closestPlayer = FirstOf(SortedArray(FilteredArray(AllLivingPlayers(Team.Team2), HasSpawned(ArrayElement())), DistanceBetween(EventPlayer(), ArrayElement())));
                define timeToPlayer = DistanceBetween(EyePosition(EventPlayer()), EyePosition(closestPlayer))/ (26.66*5); // 500% projectile speed
                define nextPlayerPos = EyePosition(closestPlayer) +  VelocityOf(closestPlayer)*timeToPlayer;
                nextPlayerPos += Vector(RandomReal(-rein_inaccuracy_interval, rein_inaccuracy_interval), RandomReal(-rein_inaccuracy_interval, rein_inaccuracy_interval), RandomReal(-rein_inaccuracy_interval, rein_inaccuracy_interval));
                //nextPlayerPos = Vector(nextPlayerPos.X, EyePosition(closestPlayer).Y, nextPlayerPos.Z);
                    
                //SetFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), EyePosition(closestPlayer)), Relative.ToWorld);
                SetFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), nextPlayerPos), Relative.ToWorld); // Aim prediction?

                if (AbsoluteValue(PositionOf(EventPlayer()).Y - PositionOf(closestPlayer).Y) <= 4.5) {
                    PressButton(EventPlayer(), Button.Ability1);
                }
                    
                PressButton(EventPlayer(), Button.Ability1);
                define playerDist = DistanceBetween(EventPlayer(), closestPlayer);
                if (playerDist > 2 ) {
                    //StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), closestPlayer), 100, Relative.ToWorld, ThrottleBehavior.AddToExistingThrottle);
                    StartThrottleInDirection(EventPlayer(), DirectionTowards(EventPlayer(), nextPlayerPos), 100, Relative.ToWorld, ThrottleBehavior.AddToExistingThrottle);
                }
                else {
                    StopThrottleInDirection(EventPlayer());
                }            
                if (playerDist <= 5) {
                    PressButton(EventPlayer(), Button.PrimaryFire);
                }
                else {
                    PressButton(EventPlayer(), Button.Ability2);
                }
            }
            else {
                StopThrottleInDirection(EventPlayer());
            }
        }
        Wait(0.25);
    }
}

rule: "Rein_crouch"
Event.OngoingPlayer {
    for (;;) {

        //Reinhardt tbag
        if (IsDummyBot(EventPlayer()) && EventPlayer().Hero() == Hero.Reinhardt) {
            if (CountOf(AllLivingPlayers(Team.Team2)) == 0 || !IsGameInProgress()) {
                if (!IsCrouching(EventPlayer())) {
                    StartHoldingButton(EventPlayer(), Button.Crouch);
                }
                else {
                    StopHoldingButton(EventPlayer(), Button.Crouch);
                }
            }
            else if (IsCrouching(EventPlayer())) {
                StopHoldingButton(EventPlayer(), Button.Crouch);
            }
        }
        
        Wait(0.25);
    }
}

rule: "Red explosion on death"
Event.OnDeath {
    if (EventPlayer().Team() == Team.Team2) {
        //CreateEffect(AllPlayers(), Effect.DecalSound, Color.Red, EventPlayer(), 10);
        PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Red, EventPlayer(), 20.0);
    }
}

rule: "Roof" 
Event.OngoingPlayer {
    //define roofHud = CreateHudText(EventPlayer(), "Height", PositionOf(EventPlayer()).Y);
    for(;;) {
        //DestroyHudText(roofHud);
        //roofHud = CreateHudText(EventPlayer(), "Height", PositionOf(EventPlayer()).Y);
        if (PositionOf(EventPlayer()).Y > 23.0) {
            EventPlayer().Teleport(Vector(PositionOf(EventPlayer()).X, 23.0, PositionOf(EventPlayer()).Z));
        }
        Wait(0.25);
    }

}